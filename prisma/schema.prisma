// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  name                 String    @db.VarChar(50)
  email                String    @unique @db.VarChar(255)
  password             String    @db.VarChar(255)
  phone                String    @db.VarChar(15)
  verificationToken    String?   @db.VarChar(255)
  verified             Boolean   @default(false)
  resetPasswordToken   String?   @db.VarChar(255)
  resetPasswordExpires DateTime?
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  shops                Shop[]
  orders               Order[]

  @@map("User")
}

model Shop {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(100)
  address     String       @db.Text
  gstNumber   String?      @db.VarChar(15)
  logo        String?      @db.Text
  ownerId     String       @unique
  owner       User         @relation(fields: [ownerId], references: [id])
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categories  Category[]
  collections Collection[]
  products    Product[]

  @@map("Shop")
}

model Category {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(100)
  description String?      @db.Text
  image       String?      @db.Text
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  shopId      String
  shop        Shop         @relation(fields: [shopId], references: [id])
  collection  Collection[]
  products    Product[]

  @@map("Category")
}

model Collection {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(100)
  description String?   @db.Text
  image       String?   @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])

  @@map("Collection")
}

model Product {
  id               String             @id @default(uuid())
  name             String             @db.VarChar(100)
  description      String?            @db.Text
  price            Decimal            @db.Decimal(10, 2)
  masterImage      String             @db.Text
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  collectionId     String
  collection       Collection         @relation(fields: [collectionId], references: [id])
  categoryId       String
  category         Category           @relation(fields: [categoryId], references: [id])
  shopId           String
  shop             Shop               @relation(fields: [shopId], references: [id])
  images           ProductImage[]
  features         ProductFeature[]
  inventoryDetails InventoryDetails[]
  orderItems       OrderItem[]

  @@map("Product")
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String   @db.Text
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ProductImage")
}

model ProductFeature {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  value     String   @db.Text
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ProductFeature")
}

model InventoryDetails {
  id                 String              @id @default(uuid())
  productId          String              @unique
  product            Product             @relation(fields: [productId], references: [id])
  totalStock         Int                 @default(0)
  minStock           Int                 @default(0)
  maxStock           Int                 @default(1000)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  @@map("InventoryDetails")
}

enum TransactionType {
  STOCK_ADD
  STOCK_REMOVE
  DAMAGE
  ADJUSTMENT
}

model Order {
  id              String      @id @default(uuid())
  customerId      String
  customer        User        @relation(fields: [customerId], references: [id])
  items           OrderItem[]
  shippingAddress Json
  paymentMethod   String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  invoices        Invoice[]

  @@map("Order")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("OrderItem")
}

model Invoice {
  id        String        @id @default(uuid())
  orderId   String
  order     Order         @relation(fields: [orderId], references: [id])
  amount    Decimal       @db.Decimal(10, 2)
  status    InvoiceStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("Invoice")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}
